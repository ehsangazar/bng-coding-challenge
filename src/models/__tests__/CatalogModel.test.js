const CatalogModel = require('../CatalogModel')
const fileHandler = require('../../utils/fileHandler')
const testDirectoryPath1 = __dirname + '/../../../mock/input1'
const testDirectoryPath2 = __dirname + '/../../../mock/input2'
const testDirectoryPath3 = __dirname + '/../../../mock/input3'

describe('CatalogModel', () => {
  test('catalogObject should work as expected', async () => {
    const catalogObject = new CatalogModel()
    expect(catalogObject).toBeDefined()
  })
  test('catalogObject and products should be defined', async () => {
    const catalogObject = new CatalogModel()
    expect(catalogObject.products).toBeDefined()
    expect(catalogObject.products.length).toBe(0)
  })
  test('CatalogModel should have functions defined', async () => {
    const catalogObject = new CatalogModel()
    expect(catalogObject.addProduct).toBeDefined()
    expect(catalogObject.checkExistance).toBeDefined()
    expect(catalogObject.getProducts).toBeDefined()
    expect(catalogObject.getOutputJsonData).toBeDefined()
    expect(catalogObject.addProducts).toBeDefined()
  })
  test('catalogObject add products should work', async () => {
    const catalogObject = new CatalogModel()
    const fileNames = await fileHandler.readDirectory(testDirectoryPath1)
    const sources = fileHandler.getSources(fileNames)
    const catalogsData = await fileHandler.getCatalogsData(sources)
    await catalogObject.addProducts(catalogsData[0])
    expect(catalogObject.products.length).toBe(5)
  })
  test('catalogObject getProducts should work', async () => {
    const catalogObject = new CatalogModel()
    const fileNames = await fileHandler.readDirectory(testDirectoryPath1)
    const sources = fileHandler.getSources(fileNames)
    const catalogsData = await fileHandler.getCatalogsData(sources)
    await catalogObject.addProducts(catalogsData[0])
    expect(catalogObject.getProducts().length).toBe(5)
  })
  test('catalogObject checkExistance should work', async () => {
    const catalogObject = new CatalogModel()
    const fileNames = await fileHandler.readDirectory(testDirectoryPath1)
    const sources = fileHandler.getSources(fileNames)
    const catalogsData = await fileHandler.getCatalogsData(sources)
    await catalogObject.addProducts(catalogsData[0])
    await catalogObject.addProducts(catalogsData[1])
    expect(catalogObject.getProducts().length).toBe(7)
  })
  test('catalogObject getOutputJsonData should work', async () => {
    const catalogObject = new CatalogModel()
    const fileNames = await fileHandler.readDirectory(testDirectoryPath1)
    const sources = fileHandler.getSources(fileNames)
    const catalogsData = await fileHandler.getCatalogsData(sources)
    await catalogObject.addProducts(catalogsData[0])
    await catalogObject.addProducts(catalogsData[1])
    const resultJson = catalogObject.getOutputJsonData()
    expect(resultJson.length).toBe(7)
    expect(resultJson[0].SKU).toBe('647-vyk-317')
    expect(resultJson[0].Description).toBe('Walkers Special Old Whiskey')
    expect(resultJson[0].Source).toBe('A')
  })
  test('catalogObject testDirectoryPath2 if we have Same SKU and they are same products', async () => {
    const catalogObject = new CatalogModel()
    const fileNames = await fileHandler.readDirectory(testDirectoryPath2)
    const sources = fileHandler.getSources(fileNames)
    const catalogsData = await fileHandler.getCatalogsData(sources)
    await catalogObject.addProducts(catalogsData[0])
    expect(catalogObject.getProducts().length).toBe(5)
  })
  test('catalogObject testDirectoryPath2 if we have Different SKU and they have one similar barcode so they are same products', async () => {
    const catalogObject = new CatalogModel()
    const fileNames = await fileHandler.readDirectory(testDirectoryPath3)
    const sources = fileHandler.getSources(fileNames)
    const catalogsData = await fileHandler.getCatalogsData(sources)
    await catalogObject.addProducts(catalogsData[0])
    expect(catalogObject.getProducts().length).toBe(5)
  })
})
